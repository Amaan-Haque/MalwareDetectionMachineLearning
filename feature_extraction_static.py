import os
import pandas as pd
import numpy as np

DllCharacteristics_found = False
DebugSize_found = False
ImageVersion_found = False
IatRVA_found = False
ExportSize_found = False
ResourceSize_found = False
NumberOfSections_found = False

hashes_benign = []
DllCharacteristics_benign = []
DebugSize_benign = []
MajorImageVersion_benign = []
MinorImageVersion_benign = []
IatRVA_benign = []
ExportSize_benign = []
ResourceSize_benign = []
NumberOfSections_benign = []


# Walk through all benign files
for dirpath, dirnames, files in os.walk('./Static_Analysis_Data/Benign'):
    for file_name in files:
        if (file_name == "Structure_Info.txt"):
            hash_name = dirpath.split("/")[-1]
            hashes_benign.append(hash_name)
            with open(os.path.join("./Static_Analysis_Data/Benign", hash_name, "Structure_Info.txt"), errors='ignore') as file:
                # Found Flags
                DllCharacteristics_found = False
                DebugSize_found = False
                ImageVersion_found = False
                IatRVA_found = False                
                ExportSize_found = False
                ResourceSize_found = False
                NumberOfSections_found = False
                for line in file:
                    if (DllCharacteristics_found and DebugSize_found and ImageVersion_found and IatRVA_found and ExportSize_found and ResourceSize_found and NumberOfSections_found): break

                    if (not DllCharacteristics_found and "DllCharacteristics" in line):
                        DllCharacteristics_benign.append(int(line.split(':')[-1].strip(), 16))
                        DllCharacteristics_found = True

                    if (not DebugSize_found and "IMAGE_DIRECTORY_ENTRY_DEBUG" in line):
                        line = next(file)
                        line = next(file)
                        DebugSize_benign.append(int(line.split(':')[-1].strip(), 16))
                        DebugSize_found = True

                    # 0x124      0x2C  MajorImageVersion:             0x0       
                    # 0x126      0x2E  MinorImageVersion:             0x0  
                    if (not ImageVersion_found and "MajorImageVersion" in line):
                        line = next(file)
                        MajorImageVersion_benign.append(int(line.split(':')[-1].strip(), 16))
                        line = next(file)
                        MinorImageVersion_benign.append(int(line.split(':')[-1].strip(), 16))
                        ImageVersion_found = True

                    # [IMAGE_DIRECTORY_ENTRY_IAT]
                    # 0x1D8      0x0   VirtualAddress:                0x0       
                    # 0x1DC      0x4   Size:                          0x0 
                    if (not IatRVA_found and "IMAGE_DIRECTORY_ENTRY_IAT" in line):
                        line = next(file)
                        IatRVA_benign.append(int(line.split(':')[-1], 16))
                        IatRVA_found = True

                    # [IMAGE_DIRECTORY_ENTRY_EXPORT]
                    # 0x168      0x0   VirtualAddress:                0x0       
                    # 0x16C      0x4   Size:                          0x0  
                    if (not ExportSize_found and "IMAGE_DIRECTORY_ENTRY_EXPORT" in line):
                        line = next(file)
                        line = next(file)
                        ExportSize_benign.append(int(line.split(':')[-1].strip(), 16))
                        ExportSize_found = True

                    # [IMAGE_DIRECTORY_ENTRY_RESOURCE]
                    # 0x168      0x0   VirtualAddress:                0x0       
                    # 0x16C      0x4   Size:                          0x0  
                    if (not ResourceSize_found and "IMAGE_DIRECTORY_ENTRY_RESOURCE" in line):
                        line = next(file)
                        line = next(file)
                        ResourceSize_benign.append(int(line.split(':')[-1].strip(), 16))
                        ResourceSize_found = True

                    # [IMAGE_FILE_HEADER]
                    # 0x84       0x0   Machine:                       0x14C     
                    # 0x86       0x2   NumberOfSections:              0xA     
                    if (not NumberOfSections_found and "IMAGE_FILE_HEADER" in line):
                        line = next(file)
                        line = next(file)
                        NumberOfSections_benign.append(int(line.split(':')[-1].strip(), 16))
                        NumberOfSections_found = True


hashes_malware = []
DllCharacteristics_malware = []
DebugSize_malware = []
MajorImageVersion_malware = []
MinorImageVersion_malware = []
IatRVA_malware = []
ExportSize_malware = []
ResourceSize_malware = []
NumberOfSections_malware = []

# Walk through all malware files
for dirpath, dirnames, files in os.walk('./Static_Analysis_Data/Malware'):
    for file_name in files:
        if (file_name == "Structure_Info.txt"):
            hash_name = dirpath.split("/")[-1]
            hashes_malware.append(hash_name)
            with open(os.path.join(dirpath, "Structure_Info.txt"), errors='ignore') as file:
                # Found Flags
                DllCharacteristics_found = False
                DebugSize_found = False
                ImageVersion_found = False
                IatRVA_found = False
                ExportSize_found = False
                ResourceSize_found = False
                NumberOfSections_found = False
                for line in file:
                    if (DllCharacteristics_found and DebugSize_found and ImageVersion_found and IatRVA_found and ExportSize_found and ResourceSize_found and NumberOfSections_found): break

                    if (not DllCharacteristics_found and "DllCharacteristics" in line):
                        DllCharacteristics_malware.append(int(line.split(':')[-1].strip(), 16))
                        DllCharacteristics_found = True

                    if (not DebugSize_found and "IMAGE_DIRECTORY_ENTRY_DEBUG" in line):
                        try:
                            line = next(file)
                            line = next(file)
                            DebugSize_malware.append(int(line.split(':')[-1].strip(), 16))
                            DebugSize_found = True
                        except: break

                    # 0x124      0x2C  MajorImageVersion:             0x0       
                    # 0x126      0x2E  MinorImageVersion:             0x0  
                    if (not ImageVersion_found and "MajorImageVersion" in line):
                        line = next(file)
                        MajorImageVersion_malware.append(int(line.split(':')[-1].strip(), 16))
                        line = next(file)
                        MinorImageVersion_malware.append(int(line.split(':')[-1].strip(), 16))
                        ImageVersion_found = True

                    # [IMAGE_DIRECTORY_ENTRY_IAT]
                    # 0x1D8      0x0   VirtualAddress:                0x0       
                    # 0x1DC      0x4   Size:                          0x0 
                    if (not IatRVA_found and "IMAGE_DIRECTORY_ENTRY_IAT" in line):
                        line = next(file)
                        IatRVA_malware.append(int(line.split(':')[-1], 16))
                        IatRVA_found = True

                    # [IMAGE_DIRECTORY_ENTRY_EXPORT]
                    # 0x168      0x0   VirtualAddress:                0x0       
                    # 0x16C      0x4   Size:                          0x0  
                    if (not ExportSize_found and "IMAGE_DIRECTORY_ENTRY_EXPORT" in line):
                        line = next(file)
                        line = next(file)
                        ExportSize_malware.append(int(line.split(':')[-1].strip(), 16))
                        ExportSize_found = True

                    # [IMAGE_DIRECTORY_ENTRY_RESOURCE]
                    # 0x168      0x0   VirtualAddress:                0x0       
                    # 0x16C      0x4   Size:                          0x0  
                    if (not ResourceSize_found and "IMAGE_DIRECTORY_ENTRY_RESOURCE" in line):
                        line = next(file)
                        line = next(file)
                        ResourceSize_malware.append(int(line.split(':')[-1].strip(), 16))
                        ResourceSize_found = True

                    # [IMAGE_FILE_HEADER]
                    # 0x84       0x0   Machine:                       0x14C     
                    # 0x86       0x2   NumberOfSections:              0xA     
                    if (not NumberOfSections_found and "IMAGE_FILE_HEADER" in line):
                        line = next(file)
                        line = next(file)
                        NumberOfSections_malware.append(int(line.split(':')[-1].strip(), 16))
                        NumberOfSections_found = True




# these files have no structure info
hashes_benign.remove('dbaaae72b2356d96f8c86b39f88080065cf3ebd23c7c3feb4399f94c94c5f869')
hashes_malware.remove('424ec219d04d2ded84593c0aa5ecac72c8745b58c72d11f427117a18116a9e4e')

df_benign = pd.DataFrame({'hash' : hashes_benign, 'DllCharacteristics' : DllCharacteristics_benign, 'DebugSize' : DebugSize_benign, 'MajorImageVersion': MajorImageVersion_benign, 'MinorImageVersion' : MinorImageVersion_benign, 'IatRVA' : IatRVA_benign, 'ExportSize' : ExportSize_benign, 'ResourceSize' : ResourceSize_benign, 'NumberOfSections' : NumberOfSections_benign, 'legit' : True})

df_malware = pd.DataFrame({'hash' : hashes_malware, 'DllCharacteristics' : DllCharacteristics_malware, 'DebugSize' : DebugSize_malware, 'MajorImageVersion': MajorImageVersion_malware, 'MinorImageVersion' : MinorImageVersion_malware, 'IatRVA' : IatRVA_malware, 'ExportSize' : ExportSize_malware, 'ResourceSize' : ResourceSize_malware, 'NumberOfSections' : NumberOfSections_malware,  'legit' : False})


final_data =[df_benign, df_malware]
final_data = pd.concat(final_data, ignore_index = True)

final_data.to_csv("final_data_static.csv")

############################################################################################################3

# # Walk through all benign files
# with open('./test.txt', "r") as file:
#     for line in file:
#         if "1" in line:
#             try:
#                 line = next(file)
#                 line = next(file)
#             except:
#                 break
#             print(line)
#         else:
#             print(line)

